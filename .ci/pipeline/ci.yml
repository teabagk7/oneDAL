# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  branches:
    include:
    - master
    - rls/*

pr:
  branches:
    include:
    - master
    - rls/*

jobs:
- job: 'ClangFormat'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
    - script: |
        .ci/env/clang.sh
      displayName: 'apt-get'
    - script: |
        .ci/scripts/clang-format.sh
      displayName: 'clang-format check'
      failOnStderr: true
- job: 'LinuxMake'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_gnu'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get update && sudo apt-get install gcc-multilib g++-multilib openjdk-8-jdk
    displayName: 'apt-get'
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target daal
    displayName: 'make daal'
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target oneapi_c
    displayName: 'make oneapi_c'
  - script: |
      cp -R $(release.dir) $(Build.ArtifactStagingDirectory)/
    displayName: 'Copy build'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: '$(platform.type) build'
      targetPath: '$(release.dir)'
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --platform $(platform.type)
    displayName: 'examples'

- job: 'LinuxBazel'
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install gcc-multilib \
                           g++-multilib \
                           binutils \
                           openjdk-11-jdk \
                           bazel-3.4.1
    displayName: 'apt-get'

  - script: |
      bazel build @config//:dump
      cat bazel-bin/external/config/config.json
    displayName: 'config-dump'

  - script: |
      bazel build :release
    displayName: 'release'

  - script: |
      bazel test //examples/oneapi/cpp:all \
                 --@config//:test_link_mode=dev
    displayName: 'cpp-examples-thread-dev'

  - script: |
      bazel test //examples/oneapi/cpp:all \
                 --@config//:test_link_mode=static
    displayName: 'cpp-examples-thread-static'

  - script: |
      export DAALROOT=`pwd`/bazel-bin/release/daal/latest
      bazel test //examples/oneapi/cpp:all \
                 --@config//:test_link_mode=release_static
    displayName: 'cpp-examples-thread-release-static'

  - script: |
      bazel test //cpp/oneapi/dal:tests \
                 --@config//:test_link_mode=dev \
                 --test_tag_filters=-heavy
    displayName: 'cpp-tests-thread-dev'

- job: daal4py
  dependsOn: LinuxMake
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_gnu'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-18.04'
    maxParallel: 2
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '$(platform.type) build'
      path: $(Pipeline.Workspace)
  - script: |
        .ci/env/dpcpp.sh
    displayName: 'create dpcpp enviroment'
  - script: |
      sudo apt-get install git
      git clone https://github.com/IntelPython/daal4py.git
    displayName: clone daal4py
  - script: |
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      bash miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
      conda create -q -y -n CB python=3.7 conda-build conda-verify
    displayName: Create Anaconda environment
  - script: |
      export DPCPP_VAR=/opt/intel/oneapi/compiler/latest/env/vars.sh
      export DAALROOT=$(Pipeline.Workspace)/daal/latest
      . $HOME/miniconda/etc/profile.d/conda.sh
      conda activate CB
      cd daal4py
      conda build --override-channels -c conda-forge -c intel --no-test conda-recipe
    displayName: conda build
  - script: |
      $(Pipeline.Workspace)/s/.ci/scripts/conformance_test.sh --build-dir $(Pipeline.Workspace) --conda-dir $HOME/miniconda --oneapi-dir /opt/intel/oneapi
    timeoutInMinutes: 15
    displayName: conformance
  - script: |
      cp -R $(Pipeline.Workspace)/s/.ci/scripts/conformance-scripts/_log_* $(Build.ArtifactStagingDirectory)/
      cp -R $(Pipeline.Workspace)/s/.ci/scripts/conformance-scripts/report.html $(Build.ArtifactStagingDirectory)/
    displayName: copy report
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: '$(platform.type) conformance tests report'
      targetPath: '$(Build.ArtifactStagingDirectory)/'
  - script: |
      export TBBROOT=$(Pipeline.Workspace)/tbb/latest
      $(Pipeline.Workspace)/s/.ci/scripts/daal4py_test.sh --build-dir $(Pipeline.Workspace) --conda-dir $HOME/miniconda --oneapi-dir /opt/intel/oneapi --daal4py-dir $(Pipeline.Workspace)/s/daal4py
    timeoutInMinutes: 15
    displayName: daal4py test
- job: 'macOSMake'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_mac_clang'
    platform.type : 'mac32e'
  pool:
    vmImage:  'macOS-10.15'
  steps:
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target daal
    displayName: 'make daal'
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target oneapi_c
    displayName: 'make oneapi_c'
  - script: |
      cp -R $(release.dir) $(Build.ArtifactStagingDirectory)/
    displayName: 'Copy build'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'Mac build'
      targetPath: '$(release.dir)'

# Windows build is temporary disabled
#- job: Windows
#  pool:
#    vmImage: 'vs2017-win2016'
#  steps:
#  - script: |
#      java -version
#      set INCLUDE=%JAVA_HOME%\include;%JAVA_HOME%\include\win32;%INCLUDE%
#      call .\scripts\mklfpk.bat && call .\scripts\tbb.bat
#      call "%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall" x64
#      call .\__deps\tbb\bin\tbbvars.bat intel64 14_uwp
#     make daal COMPILER=vc PLAT="win32e"
